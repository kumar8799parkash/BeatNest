üåç 1. What is CORS?

CORS = Cross-Origin Resource Sharing.
It‚Äôs a security mechanism built into browsers to control how a web page (frontend) can request resources (API, data, images, etc.) from a different origin.


2. What is an "Origin"?

Origin = combination of protocol + domain (or IP) + port.

Examples:

http://localhost:3000 ‚Üí origin = http + localhost + 3000

http://localhost:5000 ‚Üí origin = http + localhost + 5000

https://beatnest.com ‚Üí origin = https + beatnest.com + 443

üëâ Even if domain is same but port is different, it‚Äôs a different origin!
So:

http://localhost:3000 and http://localhost:5000 ‚Üí different origins ‚ùå

https://beatnest.com and http://beatnest.com ‚Üí different origins ‚ùå

https://beatnest.com/api and https://beatnest.com/home ‚Üí same origin ‚úÖ (path doesn‚Äôt matter)





3. Why does CORS create problems?

Browsers block cross-origin requests by default, because otherwise:

A malicious website could secretly call your APIs, steal data, or impersonate users.

Example: Imagine you‚Äôre logged into bank.com. If CORS didn‚Äôt exist, a malicious site hacker.com could run:

fetch("https://bank.com/transfer?to=hacker&amount=1000")


üò± and your money is gone.

So, CORS prevents websites from calling APIs unless the server explicitly allows it.





4. How CORS works (Mechanism)

When frontend calls a backend on a different origin:

Browser first sends a CORS preflight request (an OPTIONS request).

‚ÄúHey server, can I call you from this origin?‚Äù

Server must respond with proper CORS headers, e.g.:

Access-Control-Allow-Origin: http://localhost:3000
Access-Control-Allow-Methods: POST, GET, OPTIONS
Access-Control-Allow-Headers: Content-Type, Authorization


If the headers match ‚Üí browser allows the actual request.
If not ‚Üí browser blocks the request, and you see error in console:
‚ùå Access to fetch at 'http://localhost:5000/signup' from origin 'http://localhost:3000' has been blocked by CORS policy







‚úÖ 5. How to Fix CORS in Express

That‚Äôs why we use the cors middleware in Express:

Step 1: Install
npm install cors

Step 2: Use in backend
const cors = require("cors");

// Allow all origins (for dev)
app.use(cors());

// Or allow only specific origin
app.use(cors({
  origin: "http://localhost:3000",   // allow only frontend on 3000
  methods: ["GET", "POST"],
  allowedHeaders: ["Content-Type", "Authorization"]
}));







üèóÔ∏è 6. Different Use Cases of CORS
Case A: Development (different ports)

Frontend: http://localhost:3000

Backend: http://localhost:5000

Fix: use app.use(cors({ origin: "http://localhost:3000" }))

Case B: Production (different domains)

Frontend: https://beatnest.com

Backend: https://api.beatnest.com

Fix:

app.use(cors({
  origin: "https://beatnest.com"
}));

Case C: Public API

If you want anyone in the world to use your API (like weather API):

app.use(cors({ origin: "*" }));   // allow all origins


‚ö†Ô∏è But not safe if sensitive data is involved.

Case D: Private API

If only your own frontend should access backend:

app.use(cors({
  origin: ["https://beatnest.com", "https://admin.beatnest.com"]
}));